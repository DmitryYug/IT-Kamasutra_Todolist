{"version":3,"sources":["components/AddItemInput/AddItemInput.tsx","components/EditableSpan/EditableSpan.tsx","components/Todolist.tsx","components/AppBar/AppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemInput","addItem","useState","newItemValue","setNewItem","error","setError","onChangeHandler","e","currentTarget","value","onKeyPressHandler","key","trim","currentInput","TextField","id","label","defaultValue","onChange","onKeyPress","size","style","margin","Button","onClick","variant","maxWidth","maxHeight","minWidth","minHeight","fontSize","EditableSpan","title","editMode","setEditMode","newTitle","setNewTitle","viewModeEnabled","elements","type","autoFocus","onDoubleClick","onBlur","Todolist","tdlId","tdlTitle","tasks","filter","removeTask","onFilter","addTasks","checkBoxChange","removeTDL","spanChange","tdlTitleSpanChange","onFilterHandler","taskElements","map","tasksObj","List","Checkbox","checked","isDone","inputProps","onChangeTitleHandler","IconButton","taskId","onRemoveTask","onChangeTdlTitleHandler","taskValue","ButtonGroup","aria-label","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","color","mr","Typography","component","App","todolist1Id","v1","todolist2Id","tdls","setTdls","allTasksObj","setAllTasksObj","newTaskValue","newTaskObj","task","tl","todolistId","currentTask","find","t","currentTdl","tdl","tdlsElements","filteredTasksForTodolist","Grid","item","Paper","padding","elevation","className","Container","fixed","container","newTdlTitle","newTDLId","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7cefb93c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\nimport AddIcon from '@mui/icons-material/Add';\n\n\ntype AddItemInputProps = {\n    addItem: (newItemValue: string) => void\n    // id?: string\n}\n\nconst AddItemInput: React.FC<AddItemInputProps> = ({addItem}) => {\n\n    let [newItemValue, setNewItem] = useState('')\n    let [error, setError] = useState<boolean>(false)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(false)\n        setNewItem(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            if (newItemValue.trim() === '') {\n                setError(true)\n                return\n            } else {\n                setError(false)\n            }\n            addItem(newItemValue)\n            setNewItem('')\n        }\n    }\n    const addItemOnclickHandler = () => {\n        if (newItemValue.trim() === '') {\n            setError(true)\n            return\n        } else {\n            setError(false)\n\n        }\n        addItem(newItemValue)\n        setNewItem('')\n    }\n\n    const currentInput = error ?\n        <TextField\n            error\n            id=\"outlined-error\"\n            label=\"Empty input\"\n            defaultValue=\"Hello World\"\n            value={newItemValue}\n            onChange={onChangeHandler}\n            onKeyPress={onKeyPressHandler}\n            size='small'\n        /> :\n        <TextField\n            id=\"outlined-helperText\"\n            label=\"type...\"\n            value={newItemValue}\n            onChange={onChangeHandler}\n            onKeyPress={onKeyPressHandler}\n            size='small'\n        />\n\n    return (\n        <div style={{margin: '10px 0 10px 0'}}>\n            {currentInput}\n            <Button onClick={addItemOnclickHandler} variant=\"contained\"\n                    style={{maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}}>\n                <AddIcon fontSize='small'/>\n            </Button>\n            <div>{error}</div>\n        </div>\n    )\n}\n\nexport default AddItemInput","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newTitle: string) => void\n}\n\nconst EditableSpan: React.FC<EditableSpanPropsType> = ({title, onChange}) => {\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [newTitle, setNewTitle] = useState<string>(title)\n\n    const editModeEnabled = () => {\n        setEditMode(true)\n    }\n    const viewModeEnabled = () => {\n        setEditMode(false)\n        setNewTitle(newTitle)\n        onChange(newTitle)\n    }\n    const viewModeEnabledOnKeyPress = (e: KeyboardEvent<HTMLSpanElement>) => {\n        if(e.key === 'Enter') {\n          viewModeEnabled()\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n\n    let elements = editMode\n        ? <input type=\"text\" value={newTitle} onChange={onChangeHandler} autoFocus/>\n        : <span> {newTitle} </span>\n\n    return (\n        <span\n            onDoubleClick={editModeEnabled}\n            onBlur={viewModeEnabled}\n            onKeyPress={viewModeEnabledOnKeyPress}\n        >\n            {elements}\n        </span>\n    )\n}\n\nexport default EditableSpan\n","import React, {KeyboardEvent, ChangeEvent, useState} from \"react\";\nimport {TaskFilterType} from \"../App\";\nimport classes from './Todolist.module.css'\nimport AddItemInput from \"./AddItemInput/AddItemInput\";\nimport EditableSpan from \"./EditableSpan/EditableSpan\";\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItemButton, ListItemText, Tooltip} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n\n//PropsTypes\nexport type TaskType = {\n    id: string,\n    title: string,\n    isDone: boolean,\n}\ntype PropsType = {\n    tdlId: string\n    tdlTitle: string\n    tasks: Array<TaskType>\n    removeTask: (todolistId: string, taskId: string) => void\n    addTasks: (tlId: string, newTaskValue: string) => void\n    onFilter: (todolistId: string, filter: TaskFilterType) => void\n    checkBoxChange: (todolistId: string, taskId: string, checked: boolean) => void\n    spanChange: (todolistId: string, taskId: string, newTitle: string) => void\n    tdlTitleSpanChange: (todolistId: string, newTitle: string) => void\n    filter: TaskFilterType\n    removeTDL: (todolistId: string) => void\n}\n\n\nconst Todolist: React.FC<PropsType> = (\n    {\n        tdlId, tdlTitle, tasks, filter,\n        removeTask, onFilter, addTasks, checkBoxChange, removeTDL, spanChange, tdlTitleSpanChange\n    }) => {\n\n//Filter\n    const onFilterHandler = (filter: TaskFilterType) => {\n        onFilter(tdlId, filter)\n    }\n\n//Adding\n    const onClickAddTask = (taskValue: string) => {\n        addTasks(tdlId, taskValue)\n    }\n\n//Removing\n    const onRemoveTask = (tdlId: string, taskId: string) => {\n        removeTask(tdlId, taskId)\n    }\n    const onRemoveTdl = () => {\n        removeTDL(tdlId)\n    }\n\n//Editing\n    const onChangeTdlTitleHandler = (newTitle: string) => {\n        tdlTitleSpanChange(tdlId, newTitle)\n    }\n\n    const taskElements = tasks.map((tasksObj) => {\n        const checkBoxOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n            checkBoxChange(tdlId, tasksObj.id, e.currentTarget.checked)\n        }\n        const onChangeTitleHandler = (newTitle: string) => {\n            spanChange(tdlId, tasksObj.id, newTitle)\n        }\n        return (\n            <List>\n                <div key={tasksObj.id}>\n                    <Checkbox\n                        checked={tasksObj.isDone}\n                        onChange={checkBoxOnChangeHandler}\n                        inputProps={{'aria-label': 'controlled'}}\n                    />\n\n\n                    <EditableSpan\n                        onChange={(newTitle) => {onChangeTitleHandler(newTitle)}}\n                        title={tasksObj.title}\n                    />\n                    <IconButton onClick={() => onRemoveTask(tdlId, tasksObj.id)}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n            </List>\n        )\n    })\n\n\n//JSX\n    return (\n        <div>\n            <h3>\n                <EditableSpan\n                    onChange={(newTitle) => {\n                        onChangeTdlTitleHandler(newTitle)\n                    }}\n                    title={tdlTitle}\n                />\n                <IconButton onClick={() => onRemoveTdl()}>\n                    <DeleteIcon fontSize=\"small\"/>\n                </IconButton>\n            </h3>\n            <AddItemInput\n                addItem={onClickAddTask}\n            />\n            <div>\n                {taskElements}\n            </div>\n            <ButtonGroup aria-label=\"medium secondary button group\">\n                <Button variant={filter === 'all' ? 'contained' : 'outlined'}\n                        onClick={() => onFilterHandler('all')}>all</Button>\n                <Button variant={filter === 'active' ? 'contained' : 'outlined'}\n                        onClick={() => onFilterHandler('active')}>active</Button>\n                <Button variant={filter === 'completed' ? 'contained' : 'outlined'}\n                        onClick={() => onFilterHandler('completed')}>completed</Button>\n            </ButtonGroup>\n        </div>\n    )\n}\n\nexport default Todolist\n\n","import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nexport default function ButtonAppBar() {\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        Todolists\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./components/Todolist\";\r\nimport {v1} from 'uuid';\r\nimport AddItemInput from \"./components/AddItemInput/AddItemInput\";\r\nimport {Paper} from \"@mui/material\";\r\nimport ButtonAppBar from \"./components/AppBar/AppBar\";\r\nimport {Container, Grid} from \"@mui/material\";\r\n\r\n\r\nexport type TaskFilterType = 'all' | 'active' | 'completed'\r\n\r\ntype TdlsTypes = {\r\n    id: string,\r\n    title: string,\r\n    filter: TaskFilterType\r\n}\r\n\r\nfunction App() {\r\n\r\n//States\r\n    let todolist1Id = v1()\r\n    let todolist2Id = v1()\r\n\r\n    let [tdls, setTdls] = useState<Array<TdlsTypes>>([\r\n        {id: todolist1Id, title: \"What to learn\", filter: 'all'},\r\n        {id: todolist2Id, title: \"What to watch\", filter: 'completed'}\r\n    ])\r\n    let [allTasksObj, setAllTasksObj] = useState({\r\n        [todolist1Id]: [\r\n            {id: v1(), title: \"CSS\", isDone: false},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n        ],\r\n        [todolist2Id]: [\r\n            {id: v1(), title: \"Batman\", isDone: false},\r\n            {id: v1(), title: \"NBA\", isDone: true},\r\n            {id: v1(), title: \"It-kamasutra\", isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n//Adding\r\n    function addTasks(tdlId: string, newTaskValue: string) {\r\n        let newTaskObj = {id: v1(), title: newTaskValue, isDone: false}\r\n        setAllTasksObj({\r\n                ...allTasksObj,\r\n                [tdlId]: [\r\n                    newTaskObj,\r\n                    ...allTasksObj[tdlId]\r\n                ]\r\n            }\r\n        )\r\n    }\r\n\r\n    function addTdl(newTdlTitle: string) {\r\n        let newTDLId = v1()\r\n        let newTDL: TdlsTypes = {id: newTDLId, title: newTdlTitle, filter: 'all'}\r\n        setTdls([\r\n            newTDL,\r\n            ...tdls\r\n        ])\r\n        setAllTasksObj({\r\n                ...allTasksObj,\r\n                [newTDLId]: []\r\n            }\r\n        )\r\n    }\r\n\r\n//Removing\r\n    function removeTask(tdlId: string, taskId: string) {\r\n        setAllTasksObj({\r\n            ...allTasksObj,\r\n            [tdlId]: allTasksObj[tdlId].filter(task => task.id !== taskId)\r\n        })\r\n    }\r\n\r\n    function removeTDL(tdlId: string) {\r\n        setTdls(tdls.filter(tl => tl.id !== tdlId))\r\n    }\r\n\r\n//Filter\r\n    function onFilter(todolistId: string, filter: TaskFilterType) {\r\n        setTdls(tdls.map(tl => tl.id === todolistId ? {...tl, filter: filter} : tl))\r\n    }\r\n\r\n//Checkbox\r\n    function checkBoxChange(todolistId: string, taskId: string, checked: boolean) {\r\n        let tasksArr = allTasksObj[todolistId]\r\n        let currentTask = tasksArr.find(t => taskId === t.id)\r\n        if (currentTask) {\r\n            currentTask.isDone = checked\r\n            setAllTasksObj({...allTasksObj})\r\n        }\r\n    }\r\n\r\n//Editing   переделать map\r\n    function spanChange(todolistId: string, taskId: string, newTitle: string) {\r\n        let currentTask = allTasksObj[todolistId].find(t => t.id === taskId)\r\n        if (currentTask) {\r\n            currentTask.title = newTitle\r\n            setAllTasksObj({...allTasksObj})\r\n        }\r\n    }\r\n\r\n    function tdlTitleSpanChange(todolistId: string, newTitle: string) {\r\n        let currentTdl = tdls.find(tdl => tdl.id === todolistId)\r\n        if (currentTdl) {\r\n            currentTdl.title = newTitle\r\n        }\r\n        setTdls([\r\n            ...tdls\r\n        ])\r\n    }\r\n\r\n//Elements + Filter\r\n    const tdlsElements = tdls.map(tl => {\r\n\r\n        let filteredTasksForTodolist = allTasksObj[tl.id]\r\n        if (tl.filter === 'completed') {\r\n            filteredTasksForTodolist = filteredTasksForTodolist.filter(tasksObj => tasksObj.isDone)\r\n        }\r\n        if (tl.filter === 'active') {\r\n            filteredTasksForTodolist = filteredTasksForTodolist.filter(tasksObj => !tasksObj.isDone)\r\n        }\r\n\r\n        return (\r\n            <Grid item>\r\n                <Paper style={{padding: '10px'}} elevation={10}>\r\n                    <Todolist\r\n                        key={tl.id}\r\n                        tdlId={tl.id}\r\n                        tdlTitle={tl.title}\r\n                        tasks={filteredTasksForTodolist}\r\n                        filter={tl.filter}\r\n                        removeTask={removeTask}\r\n                        addTasks={addTasks}\r\n                        onFilter={onFilter}\r\n                        checkBoxChange={checkBoxChange}\r\n                        spanChange={spanChange}\r\n                        tdlTitleSpanChange={tdlTitleSpanChange}\r\n                        removeTDL={removeTDL}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container>\r\n                    <AddItemInput addItem={addTdl}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {tdlsElements}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}